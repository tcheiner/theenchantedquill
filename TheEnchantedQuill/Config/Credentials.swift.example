//
//  Credentials.swift.example
//  TheEnchantedQuill
//
//  Created by Claude on 8/10/25.
//
//  INSTRUCTIONS:
//  1. Copy this file to Credentials.swift in the same directory
//  2. Replace all placeholder values with your actual API keys
//  3. Never commit the actual Credentials.swift file to git
//

import Foundation

struct Credentials {
    
    // MARK: - Stream Chat
    struct StreamChat {
        static let apiKey = "dz5f4d5kzrue" // Your Stream Chat API key
        static let secret = "YOUR_STREAM_CHAT_SECRET_KEY_HERE" // Add your Stream Chat secret key here
    }
    
    // MARK: - Backend API
    struct Backend {
        static let baseURL = "https://your-api-domain.com" // Replace with your backend URL
        static let apiKey = "YOUR_BACKEND_API_KEY_HERE" // Add your backend API key here
    }
    
    // MARK: - Database Services
    struct Supabase {
        static let url = "https://your-project.supabase.co" // Your Supabase project URL
        static let anonKey = "YOUR_SUPABASE_ANON_KEY_HERE" // Supabase anon/public key
        static let serviceRoleKey = "YOUR_SUPABASE_SERVICE_ROLE_KEY_HERE" // Service role key (server-side only)
    }
    
    struct Cloudflare {
        static let accountId = "YOUR_CLOUDFLARE_ACCOUNT_ID_HERE"
        static let apiToken = "YOUR_CLOUDFLARE_API_TOKEN_HERE"
        
        // D1 Database
        struct D1 {
            static let databaseId = "YOUR_D1_DATABASE_ID_HERE"
            static let endpoint = "https://api.cloudflare.com/client/v4/accounts/{account_id}/d1/database/{database_id}"
        }
        
        // R2 Storage (if using for file storage)
        struct R2 {
            static let accessKeyId = "YOUR_R2_ACCESS_KEY_ID_HERE"
            static let secretAccessKey = "YOUR_R2_SECRET_ACCESS_KEY_HERE"
            static let bucketName = "your-bucket-name"
            static let endpoint = "https://your-account-id.r2.cloudflarestorage.com"
        }
    }
    
    // MARK: - Third Party Services
    struct ThirdParty {
        // Amazon/Kindle Integration
        static let amazonAPIKey = "YOUR_AMAZON_API_KEY_HERE"
        static let amazonSecretKey = "YOUR_AMAZON_SECRET_KEY_HERE"
        
        // Goodreads Integration
        static let goodreadsAPIKey = "YOUR_GOODREADS_API_KEY_HERE"
        static let goodreadsSecret = "YOUR_GOODREADS_SECRET_HERE"
        
        // Push Notifications
        static let apnsKeyId = "YOUR_APNS_KEY_ID_HERE"
        static let apnsTeamId = "YOUR_APPLE_TEAM_ID_HERE"
        
        // Analytics (if using)
        static let analyticsAPIKey = "YOUR_ANALYTICS_API_KEY_HERE"
    }
    
    // MARK: - Development vs Production
    #if DEBUG
    struct Development {
        static let streamChatApiKey = StreamChat.apiKey
        static let backendBaseURL = "http://localhost:3000" // Local development
        static let supabaseURL = "https://your-dev-project.supabase.co" // Dev Supabase project
        static let useLocalDatabase = true // Toggle for local vs remote DB in dev
    }
    #else
    struct Production {
        static let streamChatApiKey = StreamChat.apiKey
        static let backendBaseURL = Backend.baseURL
        static let supabaseURL = Supabase.url
        static let useLocalDatabase = false
    }
    #endif
    
    // MARK: - Current Configuration
    static var currentStreamAPIKey: String {
        #if DEBUG
        return Development.streamChatApiKey
        #else
        return Production.streamChatApiKey
        #endif
    }
    
    static var currentBackendURL: String {
        #if DEBUG
        return Development.backendBaseURL
        #else
        return Production.backendBaseURL
        #endif
    }
    
    static var currentSupabaseURL: String {
        #if DEBUG
        return Development.supabaseURL
        #else
        return Production.supabaseURL
        #endif
    }
    
    static var currentSupabaseKey: String {
        return Supabase.anonKey // Use anon key for client-side access
    }
    
    static var shouldUseLocalDB: Bool {
        #if DEBUG
        return Development.useLocalDatabase
        #else
        return Production.useLocalDatabase
        #endif
    }
}